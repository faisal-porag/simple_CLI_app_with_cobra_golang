package main

import (
	"bufio"
	"fmt"
	"log"
	"os"
	"strings"

	"github.com/spf13/cobra"
)

var rootCmd = &cobra.Command{
	Use:   "todo",
	Short: "A simple to-do list CLI app",
}

var tasks []string
var todoFile = "tasks.txt"

func main() {
	if err := rootCmd.Execute(); err != nil {
		fmt.Println(err)
		os.Exit(1)
	}
}

func init() {
	// Load tasks from the file when the program starts
	loadTasks()

	// Add "add" command to add a task
	var addCmd = &cobra.Command{
		Use:   "add",
		Short: "Add a new task to the to-do list",
		Args:  cobra.ExactArgs(1),
		Run: func(cmd *cobra.Command, args []string) {
			task := args[0]
			tasks = append(tasks, task)
			saveTasks()
			fmt.Printf("Added task: %s\n", task)
		},
	}
	rootCmd.AddCommand(addCmd)

	// Add "list" command to list all tasks
	var listCmd = &cobra.Command{
		Use:   "list",
		Short: "List all tasks in the to-do list",
		Run: func(cmd *cobra.Command, args []string) {
			if len(tasks) == 0 {
				fmt.Println("No tasks in the to-do list.")
			} else {
				fmt.Println("To-Do List:")
				for i, task := range tasks {
					fmt.Printf("%d. %s\n", i+1, task)
				}
			}
		},
	}
	rootCmd.AddCommand(listCmd)

	// Add "complete" command to mark a task as complete
	var completeCmd = &cobra.Command{
		Use:   "complete",
		Short: "Mark a task as complete",
		Args:  cobra.ExactArgs(1),
		Run: func(cmd *cobra.Command, args []string) {
			task := args[0]
			for i, t := range tasks {
				if strings.EqualFold(t, task) {
					tasks = append(tasks[:i], tasks[i+1:]...)
					saveTasks()
					fmt.Printf("Completed task: %s\n", task)
					return
				}
			}
			fmt.Printf("Task not found: %s\n", task)
		},
	}
	rootCmd.AddCommand(completeCmd)

	// Add "update" command to update a task
	var updateCmd = &cobra.Command{
		Use:   "update",
		Short: "Update a task in the to-do list",
		Args:  cobra.ExactArgs(2),
		Run: func(cmd *cobra.Command, args []string) {
			oldTask := args[0]
			newTask := args[1]
			for i, t := range tasks {
				if strings.EqualFold(t, oldTask) {
					tasks[i] = newTask
					saveTasks()
					fmt.Printf("Updated task: %s -> %s\n", oldTask, newTask)
					return
				}
			}
			fmt.Printf("Task not found: %s\n", oldTask)
		},
	}
	rootCmd.AddCommand(updateCmd)

	// Add "delete" command to delete a task
	var deleteCmd = &cobra.Command{
		Use:   "delete",
		Short: "Delete a task from the to-do list",
		Args:  cobra.ExactArgs(1),
		Run: func(cmd *cobra.Command, args []string) {
			task := args[0]
			for i, t := range tasks {
				if strings.EqualFold(t, task) {
					tasks = append(tasks[:i], tasks[i+1:]...)
					saveTasks()
					fmt.Printf("Deleted task: %s\n", task)
					return
				}
			}
			fmt.Printf("Task not found: %s\n", task)
		},
	}
	rootCmd.AddCommand(deleteCmd)
}

func loadTasks() {
	file, err := os.Open(todoFile)
	if err != nil {
		return
	}
	defer func(file *os.File) {
		err := file.Close()
		if err != nil {
			log.Print(err)
		}
	}(file)

	scanner := bufio.NewScanner(file)
	for scanner.Scan() {
		tasks = append(tasks, scanner.Text())
	}
}

func saveTasks() {
	file, err := os.OpenFile(todoFile, os.O_WRONLY|os.O_CREATE|os.O_EXCL, 0644)
	if err != nil {
		if os.IsExist(err) {
			// File already exists; open it for writing
			file, err = os.OpenFile(todoFile, os.O_WRONLY|os.O_TRUNC, 0644)
			if err != nil {
				fmt.Println("Error opening existing file for writing:", err)
				return
			}
		} else {
			fmt.Println("Error creating or opening file:", err)
			return
		}
	}
	defer func(file *os.File) {
		err := file.Close()
		if err != nil {
			log.Print(err)
		}
	}(file)

	for _, task := range tasks {
		_, _ = fmt.Fprintln(file, task)
	}
}
